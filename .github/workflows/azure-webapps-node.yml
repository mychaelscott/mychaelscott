<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>So You Want To Be A Doctor?</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <header>
    <h1>So You Want To Be A Doctor?</h1>
    <nav>
      <a href="/">Home</a>
      <a href="/courses">Courses</a>
      <a href="/quizzes">Quizzes</a>
    </nav>
  </header>

  <main>
    <section id="courses-list">
      <h2>Available Courses</h2>
      <ul id="course-container"></ul>
    </section>
  </main>

  <script src="script.js"></script>
</body>
</html>
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
}

header {
  background-color: #00796b;
  color: #fff;
  padding: 10px;
  text-align: center;
}

nav a {
  color: #fff;
  margin: 0 10px;
  text-decoration: none;
}

main {
  padding: 20px;
}

#courses-list {
  max-width: 800px;
  margin: auto;
}

h2 {
  color: #00796b;
}

ul {
  list-style-type: none;
  padding: 0;
}

li {
  background: #f1f1f1;
  margin: 10px 0;
  padding: 10px;
  border: 1px solid #ddd;
}
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
}

header {
  background-color: #00796b;
  color: #fff;
  padding: 10px;
  text-align: center;
}

nav a {
  color: #fff;
  margin: 0 10px;
  text-decoration: none;
}

main {
  padding: 20px;
}

#courses-list {
  max-width: 800px;
  margin: auto;
}

h2 {
  color: #00796b;
}

ul {
  list-style-type: none;
  padding: 0;
}

li {
  background: #f1f1f1;
  margin: 10px 0;
  padding: 10px;
  border: 1px solid #ddd;
}
document.addEventListener('DOMContentLoaded', async () => {
  const courseContainer = document.getElementById('course-container');

  try {
    const response = await fetch('/api/courses');
    const courses = await response.json();

    courses.forEach(course => {
      const li = document.createElement('li');
      li.innerHTML = `<strong>${course.title}</strong>: ${course.description}`;
      courseContainer.appendChild(li);
    });
  } catch (error) {
    courseContainer.innerHTML = 'Error loading courses.';
  }
});
const express = require('express');
const app = express();
const PORT = 3000;

const courses = [
  { id: 1, title: 'Anatomy Basics', description: 'Introduction to human anatomy.' },
  { id: 2, title: 'Physiology Fundamentals', description: 'Understanding bodily functions.' },
  { id: 3, title: 'Pharmacology Essentials', description: 'Introduction to drug mechanisms.' },
];

app.use(express.static('public'));

app.get('/api/courses', (req, res) => {
  res.json(courses);
});

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
So-You-Want-To-Be-A-Doctor?
├── public
│   ├── index.html
│   ├── script.js
│   └── styles.css
├── server.js
└── package.json# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '20.x'                # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: node-app
        path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
